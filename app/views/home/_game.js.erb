var myId = '<%= current_or_guest_player.email.gsub(/[^0-9A-Za-z]/, '') %>';

var land;
var player;
var dude;
var velocity = 100;
var bullets;
var fireRate = 100;
var nextFire = 0;
var playersList = {};
var cursors;

//this function will handle client communication with the server
var clientSetup = function() {
		//create() is moved here to make sure nothing is created before uniq id assignation
		create();

<% @players.uniq.each do |x| %>
  spawnPlayer('<%= x %>');
<% end %>
}

var goleft = function(i) {
    playersList[i].dude.x -= 5;
    playersList[i].dude.animations.play('left');
  }
var goright = function(i) {
    playersList[i].dude.x += 5;
    playersList[i].dude.animations.play('right');
  }
var goup = function(i) {
    playersList[i].dude.y -= 5;
    playersList[i].dude.animations.play('up')
  }
var godown = function(i) {
    playersList[i].dude.y += 5;
    playersList[i].dude.animations.play('down')
  }

var width = $('#gamescreen').innerWidth() - 50;
var height = $('#gamescreen').innerHeight();
var game = new Phaser.Game(width, height, Phaser.AUTO, 'gamescreen', { preload: preload, create: clientSetup, update: update, render: render });

function preload() {
    game.load.tilemap('level',"assets/tilemap.json",null, Phaser.Tilemap.TILED_JSON);
    game.load.image('tiles',"assets/hyptosis_tile-art-batch-1.png");
    game.load.spritesheet('dude',"assets/brandonTile.png",14,21);
    game.load.image('bullet', 'assets/bullet.png');
}

// for when new players join and leave
Dude = function (index) {
	this.cursor = {
		left:false,
		right:false,
		up:false,
		fire:false
	}

	this.input = {
		left:false,
		right:false,
		up:false,
		fire:false
	}

    var x = 150;
    var y = 150;

    this.game = game;
    this.health = 30;
    this.player = player;
    this.points = 0;
    this.bullets = game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;
    this.bullets.createMultiple(20, 'bullet', 0, false);
    this.bullets.setAll('anchor.x', 0.5);
    this.bullets.setAll('anchor.y', 0.5);
    this.bullets.setAll('outOfBoundsKill', true);
    this.bullets.setAll('checkWorldBounds', true);	
	
	
	this.currentSpeed =0;
    this.fireRate = 500;
    this.nextFire = 0;
    this.alive = true;

        console.log('Created bullet system');
    //player settings
    this.dude = game.add.sprite(game.world.centerX, game.world.centerY, 'dude');
    this.dude.animations.add('down', [0, 1, 2], 10, true);
    this.dude.animations.add('up', [3, 4, 5], 10, true);
    this.dude.animations.add('right', [6, 7, 8], 10, true);
    this.dude.animations.add('left', [9, 10, 11], 10, true);
    this.dude.anchor.set(0.5);

     console.log('added collide');
    this.dude.id = index;
    game.physics.enable(this.dude, Phaser.Physics.ARCADE);
    this.dude.body.immovable = false;
    this.dude.body.collideWorldBounds = true;
    this.dude.body.bounce.setTo(0, 0);
    this.dude.x = 150;
    this.dude.y = 150;
    this.dude.angle = 0;
    console.log('added id');
    game.physics.arcade.velocityFromRotation(this.dude.rotation, 0, this.dude.body.velocity);
};



var spawnPlayer = function(i) {
        console.log('SPAWN');
        var plyr = new Dude(i);
        playersList[i] = plyr;
        console.log(i);
}


Dude.prototype.update = function() {
    if (this.cursor.left)
    {
        this.dude.angle -= 1;
    }
    else if (this.cursor.right)
    {
        this.dude.angle += 1;
    }	
    if (this.cursor.up)
    {
        //  The speed we'll travel at
        this.currentSpeed = 300;
    }
    else
    {
        if (this.currentSpeed > 0)
        {
            this.currentSpeed -= 4;
        }
    }
	
    if (this.currentSpeed > 0)
    {
      game.physics.arcade.velocityFromRotation(this.dude.rotation, this.currentSpeed, this.dude.body.velocity);
    }	
	else
	{
		game.physics.arcade.velocityFromRotation(this.dude.rotation, 0, this.dude.body.velocity);
	}
};


function create() {

    //  We need to enable physics on the player
    game.physics.startSystem(Phaser.Physics.P2JS);
    game.physics.p2.setImpactEvents(true);


    //Tilemap and CollisionGroup
    map = game.add.tilemap('level');
    map.addTilesetImage('hyptosis_tile-art-batch-1','tiles');
    var objectsCG = game.physics.p2.createCollisionGroup();
    var wallsCG =  game.physics.p2.createCollisionGroup();
    var playerCG = game.physics.p2.createCollisionGroup();

    var walls = game.physics.p2.convertCollisionObjects(map, "object",true);
    for(var wall in walls)
    {
	    walls[wall].setCollisionGroup(wallsCG);
	    walls[wall].collides(playerCG);
    }
    //  Our tiled scrolling background
    land = map.createLayer("background");
    land.fixedToCamera = true;
    layer2 = map.createLayer("layer2");
    layer2.resizeWorld();
    land.resizeWorld();
    //map.setCollisionBetween(0, 897, true, 'object');

	player = new Dude(myId);
	playersList[myId] = player;
  console.log(player + 'created');
	dude = player.dude;
	bullets = dude.bullets;

    //camera system
    game.camera.follow(dude);
    game.camera.focusOnXY(150, 150);

    //controller system
    cursors = game.input.keyboard.createCursorKeys();
}

function update() {

    for (var i in playersList) {
		  if (!playersList[i]) continue;
		  var curBullets = playersList[i].bullets;
	  	var curDude = playersList[i].dude;
		  for (var j in playersList) {
			  if (!playersList[j]) continue;
			  if (playersList[j].alive) {
				  playersList[j].update();
			  }
		}
}
  }
function render() {
    //debug stuff
    game.debug.cameraInfo(game.camera, 32, 32);
}
